<?xml version="1.0"?>
<javancss>
  <date>2017-10-04</date>
  <time>20:11:58</time>
  <packages>
    <package>
      <name>com.jsoniter</name>
      <classes>26</classes>
      <functions>224</functions>
      <ncss>2972</ncss>
      <javadocs>2</javadocs>
      <javadoc_lines>17</javadoc_lines>
      <single_comment_lines>113</single_comment_lines>
      <multi_comment_lines>73</multi_comment_lines>
    </package>
    <package>
      <name>com.jsoniter.annotation</name>
      <classes>1</classes>
      <functions>0</functions>
      <ncss>68</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>47</multi_comment_lines>
    </package>
    <package>
      <name>com.jsoniter.any</name>
      <classes>21</classes>
      <functions>305</functions>
      <ncss>1448</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>2</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>com.jsoniter.extra</name>
      <classes>8</classes>
      <functions>28</functions>
      <ncss>925</ncss>
      <javadocs>5</javadocs>
      <javadoc_lines>80</javadoc_lines>
      <single_comment_lines>53</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>com.jsoniter.fuzzy</name>
      <classes>11</classes>
      <functions>11</functions>
      <ncss>169</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>1</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>com.jsoniter.output</name>
      <classes>21</classes>
      <functions>150</functions>
      <ncss>1816</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>42</single_comment_lines>
      <multi_comment_lines>74</multi_comment_lines>
    </package>
    <package>
      <name>com.jsoniter.spi</name>
      <classes>21</classes>
      <functions>156</functions>
      <ncss>1540</ncss>
      <javadocs>8</javadocs>
      <javadoc_lines>59</javadoc_lines>
      <single_comment_lines>32</single_comment_lines>
      <multi_comment_lines>12</multi_comment_lines>
    </package>
    <package>
      <name>com.jsoniter.static_codegen</name>
      <classes>2</classes>
      <functions>3</functions>
      <ncss>36</ncss>
      <javadocs>2</javadocs>
      <javadoc_lines>8</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <total>
      <classes>111</classes>
      <functions>877</functions>
      <ncss>8974</ncss>
      <javadocs>17</javadocs>
      <javadoc_lines>164</javadoc_lines>
      <single_comment_lines>243</single_comment_lines>
      <multi_comment_lines>206</multi_comment_lines>
    </total>
    <table>
      <tr><td>Packages</td><td>Classes</td><td>Functions</td><td>NCSS</td><td>Javadocs</td><td>per</td></tr>
      <tr><td>8.00</td><td>111.00</td><td>877.00</td><td>8,974.00</td><td>17.00</td><td>Project</td></tr>
      <tr><td></td><td>13.88</td><td>109.63</td><td>1,121.75</td><td>2.13</td><td>Package</td></tr>
      <tr><td></td><td></td><td>7.90</td><td>80.85</td><td>0.15</td><td>Class</td></tr>
      <tr><td></td><td></td><td></td><td>10.23</td><td>0.02</td><td>Function</td></tr>
    </table>
  </packages>

  <objects>
    <object>
      <name>com.jsoniter.annotation.JsonWrapperType</name>
      <ncss>1</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.any.Any</name>
      <ncss>189</ncss>
      <functions>63</functions>
      <classes>4</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.any.ArrayAny</name>
      <ncss>55</ncss>
      <functions>14</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.any.ArrayLazyAny</name>
      <ncss>138</ncss>
      <functions>16</functions>
      <classes>2</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>1</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.any.ArrayWrapperAny</name>
      <ncss>90</ncss>
      <functions>16</functions>
      <classes>1</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.any.DoubleAny</name>
      <ncss>25</ncss>
      <functions>11</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.any.DoubleLazyAny</name>
      <ncss>34</ncss>
      <functions>9</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.any.FalseAny</name>
      <ncss>20</ncss>
      <functions>9</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.any.FloatAny</name>
      <ncss>25</ncss>
      <functions>11</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.any.IntAny</name>
      <ncss>25</ncss>
      <functions>11</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.any.LazyAny</name>
      <ncss>45</ncss>
      <functions>9</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.any.ListWrapperAny</name>
      <ncss>86</ncss>
      <functions>16</functions>
      <classes>1</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.any.LongAny</name>
      <ncss>25</ncss>
      <functions>11</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.any.LongLazyAny</name>
      <ncss>34</ncss>
      <functions>9</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.any.MapWrapperAny</name>
      <ncss>104</ncss>
      <functions>16</functions>
      <classes>1</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.any.NotFoundAny</name>
      <ncss>32</ncss>
      <functions>15</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.any.NullAny</name>
      <ncss>20</ncss>
      <functions>9</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.any.ObjectAny</name>
      <ncss>67</ncss>
      <functions>13</functions>
      <classes>1</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.any.ObjectLazyAny</name>
      <ncss>170</ncss>
      <functions>17</functions>
      <classes>2</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>1</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.any.StringAny</name>
      <ncss>40</ncss>
      <functions>11</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.any.StringLazyAny</name>
      <ncss>70</ncss>
      <functions>10</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.any.TrueAny</name>
      <ncss>20</ncss>
      <functions>9</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.Codegen</name>
      <ncss>182</ncss>
      <functions>11</functions>
      <classes>1</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>6</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.CodegenAccess</name>
      <ncss>111</ncss>
      <functions>31</functions>
      <classes>1</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.CodegenImplArray</name>
      <ncss>152</ncss>
      <functions>5</functions>
      <classes>1</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>2</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.CodegenImplEnum</name>
      <ncss>67</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>1</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.CodegenImplMap</name>
      <ncss>23</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.CodegenImplNative</name>
      <ncss>156</ncss>
      <functions>4</functions>
      <classes>2</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>4</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.CodegenImplObjectHash</name>
      <ncss>121</ncss>
      <functions>8</functions>
      <classes>1</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>10</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.CodegenImplObjectStrict</name>
      <ncss>240</ncss>
      <functions>13</functions>
      <classes>1</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>15</single_comment_lines>
      <implementation_comment_lines>11</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.DefaultMapKeyDecoder</name>
      <ncss>20</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.DynamicCodegen</name>
      <ncss>18</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.extra.Base64</name>
      <ncss>111</ncss>
      <functions>6</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
      <javadocs_lines>67</javadocs_lines>
      <single_comment_lines>32</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.extra.Base64FloatSupport</name>
      <ncss>150</ncss>
      <functions>4</functions>
      <classes>8</classes>
      <javadocs>1</javadocs>
      <javadocs_lines>3</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.extra.Base64Support</name>
      <ncss>16</ncss>
      <functions>1</functions>
      <classes>2</classes>
      <javadocs>1</javadocs>
      <javadocs_lines>3</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.extra.GsonCompatibilityMode</name>
      <ncss>368</ncss>
      <functions>8</functions>
      <classes>13</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>11</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.extra.JacksonCompatibilityMode</name>
      <ncss>84</ncss>
      <functions>6</functions>
      <classes>6</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.extra.JdkDatetimeSupport</name>
      <ncss>19</ncss>
      <functions>1</functions>
      <classes>3</classes>
      <javadocs>1</javadocs>
      <javadocs_lines>3</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.extra.NamingStrategySupport</name>
      <ncss>72</ncss>
      <functions>1</functions>
      <classes>6</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>10</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.extra.PreciseFloatSupport</name>
      <ncss>24</ncss>
      <functions>1</functions>
      <classes>4</classes>
      <javadocs>1</javadocs>
      <javadocs_lines>4</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.fuzzy.MaybeEmptyArrayDecoder</name>
      <ncss>9</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>1</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.fuzzy.MaybeStringDoubleDecoder</name>
      <ncss>11</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.fuzzy.MaybeStringFloatDecoder</name>
      <ncss>11</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.fuzzy.MaybeStringIntDecoder</name>
      <ncss>11</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.fuzzy.MaybeStringLongDecoder</name>
      <ncss>11</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.fuzzy.MaybeStringShortDecoder</name>
      <ncss>11</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.fuzzy.StringDoubleDecoder</name>
      <ncss>10</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.fuzzy.StringFloatDecoder</name>
      <ncss>10</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.fuzzy.StringIntDecoder</name>
      <ncss>10</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.fuzzy.StringLongDecoder</name>
      <ncss>10</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.fuzzy.StringShortDecoder</name>
      <ncss>10</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.IterImpl</name>
      <ncss>324</ncss>
      <functions>18</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>17</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.IterImplArray</name>
      <ncss>34</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.IterImplForStreaming</name>
      <ncss>419</ncss>
      <functions>24</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>30</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.IterImplNumber</name>
      <ncss>45</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.IterImplObject</name>
      <ncss>52</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>2</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.IterImplSkip</name>
      <ncss>64</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>9</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.IterImplString</name>
      <ncss>52</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>7</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.JsonIterator</name>
      <ncss>319</ncss>
      <functions>56</functions>
      <classes>4</classes>
      <javadocs>2</javadocs>
      <javadocs_lines>17</javadocs_lines>
      <single_comment_lines>8</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.JsonIteratorPool</name>
      <ncss>22</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.output.Codegen</name>
      <ncss>151</ncss>
      <functions>12</functions>
      <classes>1</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>1</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.output.CodegenAccess</name>
      <ncss>44</ncss>
      <functions>13</functions>
      <classes>1</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.output.CodegenImplArray</name>
      <ncss>148</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>12</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.output.CodegenImplMap</name>
      <ncss>68</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.output.CodegenImplNative</name>
      <ncss>184</ncss>
      <functions>4</functions>
      <classes>1</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.output.CodegenImplObject</name>
      <ncss>121</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>8</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.output.CodegenResult</name>
      <ncss>84</ncss>
      <functions>11</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>4</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.output.DefaultMapKeyEncoder</name>
      <ncss>11</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.output.DynamicCodegen</name>
      <ncss>19</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.output.EncodingMode</name>
      <ncss>1</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>9</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.output.JsonStream</name>
      <ncss>316</ncss>
      <functions>61</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>3</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.output.JsonStreamPool</name>
      <ncss>22</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.output.ReflectionArrayEncoder</name>
      <ncss>21</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.output.ReflectionCollectionEncoder</name>
      <ncss>26</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.output.ReflectionEncoderFactory</name>
      <ncss>15</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.output.ReflectionEnumEncoder</name>
      <ncss>8</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.output.ReflectionListEncoder</name>
      <ncss>25</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.output.ReflectionMapEncoder</name>
      <ncss>46</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.output.ReflectionObjectEncoder</name>
      <ncss>75</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>1</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.output.StreamImplNumber</name>
      <ncss>187</ncss>
      <functions>6</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>2</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.output.StreamImplString</name>
      <ncss>133</ncss>
      <functions>6</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>14</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.ReflectionArrayDecoder</name>
      <ncss>50</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.ReflectionCollectionDecoder</name>
      <ncss>23</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.ReflectionDecoderFactory</name>
      <ncss>13</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.ReflectionEnumDecoder</name>
      <ncss>15</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.ReflectionMapDecoder</name>
      <ncss>37</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.ReflectionObjectDecoder</name>
      <ncss>289</ncss>
      <functions>14</functions>
      <classes>5</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>1</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.spi.Binding</name>
      <ncss>81</ncss>
      <functions>9</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>13</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.spi.ClassDescriptor</name>
      <ncss>316</ncss>
      <functions>20</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>2</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.spi.ClassInfo</name>
      <ncss>13</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.spi.Config</name>
      <ncss>336</ncss>
      <functions>27</functions>
      <classes>2</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>5</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.spi.ConstructorDescriptor</name>
      <ncss>8</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>7</javadocs_lines>
      <single_comment_lines>3</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.spi.Decoder</name>
      <ncss>26</ncss>
      <functions>1</functions>
      <classes>6</classes>
      <javadocs>1</javadocs>
      <javadocs_lines>7</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.spi.DecodingMode</name>
      <ncss>1</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>12</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.spi.EmptyExtension</name>
      <ncss>12</ncss>
      <functions>6</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.spi.Encoder</name>
      <ncss>68</ncss>
      <functions>1</functions>
      <classes>12</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.spi.EncodeTo</name>
      <ncss>3</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.spi.Extension</name>
      <ncss>7</ncss>
      <functions>6</functions>
      <classes>0</classes>
      <javadocs>6</javadocs>
      <javadocs_lines>37</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.spi.GenericsHelper</name>
      <ncss>72</ncss>
      <functions>4</functions>
      <classes>2</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>1</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.spi.JsonException</name>
      <ncss>8</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.spi.JsoniterSpi</name>
      <ncss>185</ncss>
      <functions>42</functions>
      <classes>2</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>6</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.spi.MapKeyDecoder</name>
      <ncss>2</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.spi.MapKeyEncoder</name>
      <ncss>2</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.spi.OmitValue</name>
      <ncss>130</ncss>
      <functions>2</functions>
      <classes>10</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.spi.Slice</name>
      <ncss>42</ncss>
      <functions>11</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.spi.TypeLiteral</name>
      <ncss>123</ncss>
      <functions>16</functions>
      <classes>2</classes>
      <javadocs>1</javadocs>
      <javadocs_lines>5</javadocs_lines>
      <single_comment_lines>2</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.spi.UnwrapperDescriptor</name>
      <ncss>31</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.spi.WrapperDescriptor</name>
      <ncss>3</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>3</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.static_codegen.StaticCodegen</name>
      <ncss>23</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.static_codegen.StaticCodegenConfig</name>
      <ncss>3</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
      <javadocs_lines>8</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <object>
      <name>com.jsoniter.ValueType</name>
      <ncss>1</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
      <javadocs_lines>0</javadocs_lines>
      <single_comment_lines>0</single_comment_lines>
      <implementation_comment_lines>0</implementation_comment_lines>
    </object>
    <averages>
      <ncss>74.97</ncss>
      <functions>7.90</functions>
      <classes>0.98</classes>
      <javadocs>0.15</javadocs>
      <javadocs_lines>1.48</javadocs_lines>
      <single_comment_lines>2.18</single_comment_lines>
      <implementation_comment_lines>0.32</implementation_comment_lines>
    </averages>
    <ncss>8,974.00</ncss>
  </objects>

  <functions>
    <function>
      <name>com.jsoniter.any.Any.Encoder.ReflectionEncoder$1.encode(Object,JsonStream)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.Encoder.ReflectionEncoder$1.wrap(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.wrapArray(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.EntryIterator.next()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.EntryIterator.key()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.EntryIterator.value()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.EntryIterator$1.next()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.EntryIterator$1.key()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.EntryIterator$1.value()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.Iterator$1.remove()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.Iterator$1.hasNext()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.Iterator$1.next()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.valueType()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.bindTo(T,Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.bindTo(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.bindTo(T,T,Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.bindTo(T,T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.object(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.object()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.asMap()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.asList()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.as(T,Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.as(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.as(T,Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.as(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.toBoolean(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.toBoolean()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.toInt(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.toInt()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.toLong(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.toLong()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.toFloat(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.toFloat()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.toDouble(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.toDouble()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.toString(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.toString()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.size()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.mustBeValid()</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.keys()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.iterator()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.entries()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.get(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.get(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.get(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.get(Object[],int)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.set(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.set(long)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.set(float)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.set(double)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.set(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.writeTo(JsonStream)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.reportUnexpectedType(ValueType)</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.lazyString(Any[],int,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.lazyDouble(Any[],int,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.lazyLong(Any[],int,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.lazyArray(Any[],int,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.lazyObject(Any[],int,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.wrap(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.wrap(long)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.wrap(float)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.wrap(double)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.wrap(boolean)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.wrap(String)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.wrap(T)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.wrap(T)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.wrap(T)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.wrap(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.wrapNull()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.rewrap(Any)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.rewrap(Any)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.isWildcard(Object)</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.equals(Object)</name>
      <ncss>9</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.Any.hashCode()</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayAny.ArrayAny(Any)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayAny.valueType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayAny.object()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayAny.writeTo(JsonStream)</name>
      <ncss>11</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayAny.size()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayAny.iterator()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayAny.get(int)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayAny.get(Object[],int)</name>
      <ncss>16</ncss>
      <ccn>11</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayAny.toString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayAny.toBoolean()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayAny.toInt()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayAny.toLong()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayAny.toFloat()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayAny.toDouble()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayLazyAny.ArrayLazyAny(int[],int,int)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayLazyAny.valueType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayLazyAny.object()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayLazyAny.toBoolean()</name>
      <ncss>7</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayLazyAny.toInt()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayLazyAny.toLong()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayLazyAny.toFloat()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayLazyAny.toDouble()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayLazyAny.size()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayLazyAny.iterator()</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayLazyAny.get(int)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayLazyAny.get(Object[],int)</name>
      <ncss>17</ncss>
      <ccn>11</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayLazyAny.fillCache()</name>
      <ncss>19</ncss>
      <ccn>10</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayLazyAny.fillCacheUntil(int)</name>
      <ncss>32</ncss>
      <ccn>17</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayLazyAny.LazyIterator.LazyIterator()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayLazyAny.LazyIterator.remove()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayLazyAny.LazyIterator.hasNext()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayLazyAny.LazyIterator.next()</name>
      <ncss>9</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayLazyAny.writeTo(JsonStream)</name>
      <ncss>6</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayLazyAny.toString()</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayWrapperAny.ArrayWrapperAny(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayWrapperAny.valueType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayWrapperAny.object()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayWrapperAny.toBoolean()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayWrapperAny.toInt()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayWrapperAny.toLong()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayWrapperAny.toFloat()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayWrapperAny.toDouble()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayWrapperAny.toString()</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayWrapperAny.writeTo(JsonStream)</name>
      <ncss>6</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayWrapperAny.size()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayWrapperAny.get(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayWrapperAny.get(Object[],int)</name>
      <ncss>17</ncss>
      <ccn>11</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayWrapperAny.iterator()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayWrapperAny.fillCacheUntil(int)</name>
      <ncss>11</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayWrapperAny.fillCache()</name>
      <ncss>9</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayWrapperAny.WrapperIterator.WrapperIterator()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayWrapperAny.WrapperIterator.hasNext()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayWrapperAny.WrapperIterator.next()</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ArrayWrapperAny.WrapperIterator.remove()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.DoubleAny.DoubleAny(double)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.DoubleAny.valueType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.DoubleAny.object()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.DoubleAny.toBoolean()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.DoubleAny.toInt()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.DoubleAny.toLong()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.DoubleAny.toFloat()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.DoubleAny.toDouble()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.DoubleAny.toString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.DoubleAny.set(double)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.DoubleAny.writeTo(JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.DoubleLazyAny.DoubleLazyAny(double[],int,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.DoubleLazyAny.valueType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.DoubleLazyAny.object()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.DoubleLazyAny.toBoolean()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.DoubleLazyAny.toInt()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.DoubleLazyAny.toLong()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.DoubleLazyAny.toFloat()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.DoubleLazyAny.toDouble()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.DoubleLazyAny.fillCache()</name>
      <ncss>9</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.FalseAny.valueType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.FalseAny.object()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.FalseAny.toBoolean()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.FalseAny.toInt()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.FalseAny.toLong()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.FalseAny.toFloat()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.FalseAny.toDouble()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.FalseAny.toString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.FalseAny.writeTo(JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.FloatAny.FloatAny(float)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.FloatAny.valueType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.FloatAny.object()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.FloatAny.toBoolean()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.FloatAny.toInt()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.FloatAny.toLong()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.FloatAny.toFloat()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.FloatAny.toDouble()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.FloatAny.toString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.FloatAny.set(float)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.FloatAny.writeTo(JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.IntAny.IntAny(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.IntAny.valueType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.IntAny.object()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.IntAny.toBoolean()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.IntAny.toInt()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.IntAny.toLong()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.IntAny.toFloat()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.IntAny.toDouble()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.IntAny.toString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.IntAny.set(int)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.IntAny.writeTo(JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LazyAny.LazyAny(int[],int,int)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LazyAny.valueType()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LazyAny.bindTo(T)</name>
      <ncss>7</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LazyAny.bindTo(T,T)</name>
      <ncss>7</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LazyAny.as(T)</name>
      <ncss>7</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LazyAny.as(T)</name>
      <ncss>7</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LazyAny.toString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LazyAny.parse()</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LazyAny.writeTo(JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ListWrapperAny.ListWrapperAny(List)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ListWrapperAny.valueType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ListWrapperAny.object()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ListWrapperAny.toBoolean()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ListWrapperAny.toInt()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ListWrapperAny.toLong()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ListWrapperAny.toFloat()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ListWrapperAny.toDouble()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ListWrapperAny.toString()</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ListWrapperAny.writeTo(JsonStream)</name>
      <ncss>6</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ListWrapperAny.size()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ListWrapperAny.get(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ListWrapperAny.get(Object[],int)</name>
      <ncss>17</ncss>
      <ccn>11</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ListWrapperAny.iterator()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ListWrapperAny.fillCache()</name>
      <ncss>8</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ListWrapperAny.fillCacheUntil(int)</name>
      <ncss>11</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ListWrapperAny.WrapperIterator.hasNext()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ListWrapperAny.WrapperIterator.next()</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ListWrapperAny.WrapperIterator.remove()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LongAny.LongAny(long)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LongAny.valueType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LongAny.object()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LongAny.toBoolean()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LongAny.toInt()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LongAny.toLong()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LongAny.toFloat()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LongAny.toDouble()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LongAny.toString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LongAny.set(long)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LongAny.writeTo(JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LongLazyAny.LongLazyAny(long[],int,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LongLazyAny.valueType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LongLazyAny.object()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LongLazyAny.toBoolean()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LongLazyAny.toInt()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LongLazyAny.toLong()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LongLazyAny.toFloat()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LongLazyAny.toDouble()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.LongLazyAny.fillCache()</name>
      <ncss>9</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.MapWrapperAny.MapWrapperAny(Map)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.MapWrapperAny.valueType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.MapWrapperAny.object()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.MapWrapperAny.toBoolean()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.MapWrapperAny.toInt()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.MapWrapperAny.toLong()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.MapWrapperAny.toFloat()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.MapWrapperAny.toDouble()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.MapWrapperAny.toString()</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.MapWrapperAny.writeTo(JsonStream)</name>
      <ncss>6</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.MapWrapperAny.size()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.MapWrapperAny.get(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.MapWrapperAny.get(Object[],int)</name>
      <ncss>16</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.MapWrapperAny.entries()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.MapWrapperAny.fillCacheUntil(Object)</name>
      <ncss>17</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.MapWrapperAny.fillCache()</name>
      <ncss>10</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.MapWrapperAny.WrapperIterator.WrapperIterator()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.MapWrapperAny.WrapperIterator.next()</name>
      <ncss>12</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.MapWrapperAny.WrapperIterator.key()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.MapWrapperAny.WrapperIterator.value()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.NotFoundAny.NotFoundAny(Object[],int,Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.NotFoundAny.NotFoundAny(int,Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.NotFoundAny.NotFoundAny(Object,Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.NotFoundAny.valueType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.NotFoundAny.object()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.NotFoundAny.writeTo(JsonStream)</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.NotFoundAny.get(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.NotFoundAny.get(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.NotFoundAny.get(Object[],int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.NotFoundAny.toBoolean()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.NotFoundAny.toInt()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.NotFoundAny.toLong()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.NotFoundAny.toFloat()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.NotFoundAny.toDouble()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.NotFoundAny.toString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.NullAny.valueType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.NullAny.object()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.NullAny.toBoolean()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.NullAny.toInt()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.NullAny.toLong()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.NullAny.toFloat()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.NullAny.toDouble()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.NullAny.writeTo(JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.NullAny.toString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectAny.ObjectAny(Any)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectAny.valueType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectAny.object()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectAny.writeTo(JsonStream)</name>
      <ncss>11</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectAny.toBoolean()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectAny.toInt()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectAny.toLong()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectAny.toFloat()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectAny.toDouble()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectAny.toString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectAny.get(Object)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectAny.get(Object[],int)</name>
      <ncss>15</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectAny.entries()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectAny.IteratorAdapter.IteratorAdapter(Any)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectAny.IteratorAdapter.next()</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectAny.IteratorAdapter.key()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectAny.IteratorAdapter.value()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectLazyAny.ObjectLazyAny(int[],int,int)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectLazyAny.valueType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectLazyAny.object()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectLazyAny.toBoolean()</name>
      <ncss>7</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectLazyAny.toInt()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectLazyAny.toLong()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectLazyAny.toFloat()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectLazyAny.toDouble()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectLazyAny.size()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectLazyAny.keys()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectLazyAny.get(Object)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectLazyAny.get(Object[],int)</name>
      <ncss>16</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectLazyAny.fillCacheUntil(Object)</name>
      <ncss>33</ncss>
      <ccn>19</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectLazyAny.fillCache()</name>
      <ncss>21</ncss>
      <ccn>10</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectLazyAny.entries()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectLazyAny.LazyIterator.LazyIterator()</name>
      <ncss>15</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectLazyAny.LazyIterator.next()</name>
      <ncss>25</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectLazyAny.LazyIterator.key()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectLazyAny.LazyIterator.value()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectLazyAny.writeTo(JsonStream)</name>
      <ncss>6</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.ObjectLazyAny.toString()</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.StringAny.StringAny(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.StringAny.valueType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.StringAny.object()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.StringAny.set(String)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.StringAny.writeTo(JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.StringAny.toBoolean()</name>
      <ncss>16</ncss>
      <ccn>12</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.StringAny.toInt()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.StringAny.toLong()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.StringAny.toFloat()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.StringAny.toDouble()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.StringAny.toString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.StringLazyAny.StringLazyAny(String[],int,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.StringLazyAny.valueType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.StringLazyAny.object()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.StringLazyAny.toBoolean()</name>
      <ncss>17</ncss>
      <ccn>12</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.StringLazyAny.toInt()</name>
      <ncss>8</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.StringLazyAny.toLong()</name>
      <ncss>8</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.StringLazyAny.toFloat()</name>
      <ncss>8</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.StringLazyAny.toDouble()</name>
      <ncss>8</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.StringLazyAny.toString()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.StringLazyAny.fillCache()</name>
      <ncss>8</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.TrueAny.valueType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.TrueAny.object()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.TrueAny.toBoolean()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.TrueAny.toInt()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.TrueAny.toLong()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.TrueAny.toFloat()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.TrueAny.toDouble()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.TrueAny.toString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.any.TrueAny.writeTo(JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.Codegen.getDecoder(String,Type)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.Codegen.gen(String,Type)</name>
      <ncss>46</ncss>
      <ccn>21</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.Codegen.Decoder$1.decode(JsonIterator)</name>
      <ncss>14</ncss>
      <ccn>8</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.Codegen.addPlaceholderDecoderToSupportRecursiveStructure(String)</name>
      <ncss>16</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.Codegen.canStaticAccess(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.Codegen.chooseImpl(Type)</name>
      <ncss>46</ncss>
      <ccn>23</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.Codegen.staticGen(String,String)</name>
      <ncss>10</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.Codegen.staticGen(String,OutputStreamWriter,String)</name>
      <ncss>10</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.Codegen.createDir(String)</name>
      <ncss>8</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.Codegen.genSource(DecodingMode,ClassInfo)</name>
      <ncss>14</ncss>
      <ccn>11</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.Codegen.shouldUseStrictMode(DecodingMode,ClassDescriptor)</name>
      <ncss>18</ncss>
      <ccn>16</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.Codegen.staticGenDecoders(TypeLiteral[],CodegenAccess.StaticCodegenTarget)</name>
      <ncss>4</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.addMissingField(List,long,long,String)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.reuseCollection(T)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.existingObject(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.resetExistingObject(JsonIterator)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.setExistingObject(JsonIterator,Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.nextTokenIsComma(JsonIterator)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.nextTokenIsCommaSlowPath(JsonIterator,byte)</name>
      <ncss>10</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.nextToken(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.readBoolean(String,JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.readShort(String,JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.readInt(String,JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.readLong(String,JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.readFloat(String,JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.readDouble(String,JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.read(String,JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.readArrayStart(JsonIterator)</name>
      <ncss>9</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.readObjectStart(JsonIterator)</name>
      <ncss>9</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.reportIncompleteObject(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.reportIncompleteArray(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.readObjectFieldAsString(JsonIterator)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.readObjectFieldAsHash(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.readObjectFieldAsSlice(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.readSlice(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.readMapKey(String,JsonIterator)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.skipWhitespacesWithoutLoadMore(JsonIterator)</name>
      <ncss>12</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.staticGenDecoders(TypeLiteral[],StaticCodegenTarget)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.head(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.unreadByte(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.readByte(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.calcHash(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.skipFixedBytes(JsonIterator,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenAccess.StaticCodegenTarget.StaticCodegenTarget(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplArray.genArray(ClassInfo)</name>
      <ncss>60</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplArray.genCollection(ClassInfo)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplArray.genCollectionWithCapacity(Class,Type)</name>
      <ncss>39</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplArray.genCollectionWithoutCapacity(Class,Type)</name>
      <ncss>39</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplArray.append(StringBuilder,String)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplEnum.genEnum(ClassInfo)</name>
      <ncss>9</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplEnum.buildTriTree(Object)</name>
      <ncss>17</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplEnum.renderTriTree(Object)</name>
      <ncss>9</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplEnum.addFieldDispatch(StringBuilder,int,int,Object,Byte)</name>
      <ncss>28</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplEnum.append(StringBuilder,String)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplMap.genMap(ClassInfo)</name>
      <ncss>19</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplMap.append(StringBuilder,String)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplNative.HashMap$1.Decoder$1.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplNative.HashMap$1.Decoder$1.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplNative.HashMap$1.Decoder$1.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplNative.HashMap$1.Decoder$1.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplNative.HashMap$1.Decoder$1.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplNative.HashMap$1.Decoder$1.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplNative.HashMap$1.Decoder$1.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplNative.HashMap$1.Decoder$1.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplNative.HashMap$1.Decoder$1.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplNative.HashMap$1.Decoder$1.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplNative.HashMap$1.Decoder$1.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplNative.HashMap$1.Decoder$1.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplNative.HashMap$1.Decoder$1.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplNative.HashMap$1.Decoder$1.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplNative.HashMap$1.Decoder$1.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplNative.HashMap$1.Decoder$1.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplNative.HashMap$1.Decoder$1.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplNative.HashMap$1.Decoder$1.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplNative.HashMap$1.Decoder$1.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplNative.HashMap$1.Decoder$1.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplNative.HashMap$1.Decoder$1.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplNative.genReadOp(Type)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplNative.getTypeName(Type)</name>
      <ncss>11</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplNative.genField(Binding)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplNative.genReadOp(String,Type)</name>
      <ncss>49</ncss>
      <ccn>41</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplObjectHash.Comparator$1.compare(String,String)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplObjectHash.genObjectUsingHash(ClassDescriptor)</name>
      <ncss>73</ncss>
      <ccn>15</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplObjectHash.calcHash(String)</name>
      <ncss>6</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplObjectHash.appendBindingSet(StringBuilder,ClassDescriptor,Binding)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplObjectHash.appendWrappers(WrapperDescriptor,StringBuilder)</name>
      <ncss>6</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplObjectHash.appendVarDef(StringBuilder,Binding)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplObjectHash.genNewInstCode(Class,ConstructorDescriptor)</name>
      <ncss>17</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplObjectHash.appendInvocation(StringBuilder,Binding)</name>
      <ncss>10</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplObjectHash.append(StringBuilder,String)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplObjectStrict.genObjectUsingStrict(ClassDescriptor)</name>
      <ncss>77</ncss>
      <ccn>23</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplObjectStrict.appendSetExtraToKeyValueTypeWrappers(StringBuilder,ClassDescriptor)</name>
      <ncss>9</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplObjectStrict.appendSetExtraProperteis(StringBuilder,ClassDescriptor)</name>
      <ncss>9</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplObjectStrict.hasAnythingToBindFrom(Binding)</name>
      <ncss>5</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplObjectStrict.assignMaskForRequiredProperties(Binding)</name>
      <ncss>9</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplObjectStrict.updateBindingSetOp(String,Binding)</name>
      <ncss>23</ncss>
      <ccn>12</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplObjectStrict.appendMissingRequiredProperties(StringBuilder,ClassDescriptor)</name>
      <ncss>13</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplObjectStrict.appendOnUnknownField(StringBuilder,ClassDescriptor)</name>
      <ncss>9</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplObjectStrict.buildTriTree(Binding)</name>
      <ncss>18</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplObjectStrict.renderTriTree(Object)</name>
      <ncss>9</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplObjectStrict.addFieldDispatch(StringBuilder,int,int,Object,Byte)</name>
      <ncss>38</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplObjectStrict.genObjectUsingSkip(Class,ConstructorDescriptor)</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.CodegenImplObjectStrict.append(StringBuilder,String)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.DefaultMapKeyDecoder.registerOrGetExisting(Type)</name>
      <ncss>8</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.DefaultMapKeyDecoder.DefaultMapKeyDecoder(TypeLiteral)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.DefaultMapKeyDecoder.decode(Slice)</name>
      <ncss>8</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.DynamicCodegen.gen(String,String)</name>
      <ncss>10</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.DynamicCodegen.enableStreamingSupport()</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.Base64.encodeToChar(int[],int[][],int)</name>
      <ncss>18</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.Base64.encodeToBytes(int[],JsonStream)</name>
      <ncss>12</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.Base64.encodeLongBits(long,JsonStream)</name>
      <ncss>20</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.Base64.decodeLongBits(JsonIterator)</name>
      <ncss>13</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.Base64.findEnd(int[],int)</name>
      <ncss>5</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.Base64.decodeFast(sArr.length[][][],int,int)</name>
      <ncss>30</ncss>
      <ccn>17</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.Base64FloatSupport.Encoder.ReflectionEncoder$1.encode(Object,JsonStream)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.Base64FloatSupport.Encoder.ReflectionEncoder$1.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.Base64FloatSupport.Encoder.DoubleEncoder$1.encodeDouble(double,JsonStream)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.Base64FloatSupport.Encoder.ReflectionEncoder$1.encode(Object,JsonStream)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.Base64FloatSupport.Encoder.ReflectionEncoder$1.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.Base64FloatSupport.Encoder.FloatEncoder$1.encodeFloat(float,JsonStream)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.Base64FloatSupport.enableEncodersAndDecoders()</name>
      <ncss>29</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.Base64FloatSupport.Decoder$1.decode(JsonIterator)</name>
      <ncss>7</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.Base64FloatSupport.Decoder.DoubleDecoder$1.decodeDouble(JsonIterator)</name>
      <ncss>7</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.Base64FloatSupport.Decoder$1.decode(JsonIterator)</name>
      <ncss>7</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.Base64FloatSupport.Decoder.FloatDecoder$1.decodeFloat(JsonIterator)</name>
      <ncss>7</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.Base64FloatSupport.enableDecoders()</name>
      <ncss>33</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.Base64FloatSupport.readLongBits(JsonIterator)</name>
      <ncss>8</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.Base64FloatSupport.writeLongBits(long,JsonStream)</name>
      <ncss>56</ncss>
      <ccn>8</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.Base64Support.Decoder$1.decode(JsonIterator)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.Base64Support.Encoder$1.encode(Object,JsonStream)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.Base64Support.enable()</name>
      <ncss>14</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.GsonCompatibilityMode(String,Builder)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.builder()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Builder.ThreadLocal$1.initialValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Builder.Builder()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Builder.excludeFieldsWithoutExposeAnnotation()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Builder.serializeNulls()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Builder.setDateFormat(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Builder.ThreadLocal$1.initialValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Builder.setDateFormat(int,int)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Builder.ThreadLocal$1.initialValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Builder.setDateFormat(String)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Builder.setFieldNamingStrategy(FieldNamingStrategy)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Builder.setFieldNamingPolicy(FieldNamingPolicy)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Builder.setPrettyPrinting()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Builder.disableHtmlEscaping()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Builder.setVersion(double)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Builder.setExclusionStrategies(ExclusionStrategy)</name>
      <ncss>4</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Builder.addSerializationExclusionStrategy(ExclusionStrategy)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Builder.addDeserializationExclusionStrategy(ExclusionStrategy)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Builder.build()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Builder.doBuild(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Builder.equals(Object)</name>
      <ncss>21</ncss>
      <ccn>24</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Builder.hashCode()</name>
      <ncss>10</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Builder.copy()</name>
      <ncss>10</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.createOmitValue(Type)</name>
      <ncss>6</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Encoder$1.encode(Object,JsonStream)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Encoder$1.encode(Object,JsonStream)</name>
      <ncss>40</ncss>
      <ccn>17</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.createEncoder(String,Type)</name>
      <ncss>55</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Decoder$1.decode(JsonIterator)</name>
      <ncss>6</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Decoder$1.decode(JsonIterator)</name>
      <ncss>16</ncss>
      <ccn>11</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Decoder.BooleanDecoder$1.decodeBoolean(JsonIterator)</name>
      <ncss>10</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Decoder.LongDecoder$1.decodeLong(JsonIterator)</name>
      <ncss>10</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Decoder.IntDecoder$1.decodeInt(JsonIterator)</name>
      <ncss>10</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Decoder.FloatDecoder$1.decodeFloat(JsonIterator)</name>
      <ncss>10</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.Decoder.DoubleDecoder$1.decodeDouble(JsonIterator)</name>
      <ncss>10</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.createDecoder(String,Type)</name>
      <ncss>94</ncss>
      <ccn>15</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.updateClassDescriptor(ClassDescriptor)</name>
      <ncss>32</ncss>
      <ccn>16</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.JsonProperty$1.value()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.JsonProperty$1.from()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.JsonProperty$1.to()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.JsonProperty$1.required()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.JsonProperty$1.decoder()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.JsonProperty$1.implementation()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.JsonProperty$1.encoder()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.JsonProperty$1.nullable()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.JsonProperty$1.collectionValueNullable()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.JsonProperty$1.defaultValueToOmit()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.JsonProperty$1.annotationType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.getJsonProperty(Annotation[])</name>
      <ncss>30</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.JsonIgnore$1.ignoreDecoding()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.JsonIgnore$1.ignoreEncoding()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.JsonIgnore$1.annotationType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.JsonIgnore$1.ignoreDecoding()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.JsonIgnore$1.ignoreEncoding()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.JsonIgnore$1.annotationType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.GsonCompatibilityMode.getJsonIgnore(Annotation[])</name>
      <ncss>22</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JacksonCompatibilityMode.Builder.build()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JacksonCompatibilityMode.Builder.doBuild(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JacksonCompatibilityMode.JacksonCompatibilityMode(String,Builder)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JacksonCompatibilityMode.JsonIgnore$1.ignoreDecoding()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JacksonCompatibilityMode.JsonIgnore$1.ignoreEncoding()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JacksonCompatibilityMode.JsonIgnore$1.annotationType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JacksonCompatibilityMode.getJsonIgnore(Annotation[])</name>
      <ncss>14</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JacksonCompatibilityMode.JsonProperty$1.value()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JacksonCompatibilityMode.JsonProperty$1.from()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JacksonCompatibilityMode.JsonProperty$1.to()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JacksonCompatibilityMode.JsonProperty$1.required()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JacksonCompatibilityMode.JsonProperty$1.decoder()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JacksonCompatibilityMode.JsonProperty$1.implementation()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JacksonCompatibilityMode.JsonProperty$1.encoder()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JacksonCompatibilityMode.JsonProperty$1.nullable()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JacksonCompatibilityMode.JsonProperty$1.collectionValueNullable()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JacksonCompatibilityMode.JsonProperty$1.defaultValueToOmit()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JacksonCompatibilityMode.JsonProperty$1.annotationType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JacksonCompatibilityMode.getJsonProperty(Annotation[])</name>
      <ncss>30</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JacksonCompatibilityMode.JsonCreator$1.annotationType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JacksonCompatibilityMode.getJsonCreator(Annotation[])</name>
      <ncss>10</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JacksonCompatibilityMode.JsonUnwrapper$1.annotationType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JacksonCompatibilityMode.getJsonUnwrapper(Annotation[])</name>
      <ncss>10</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JacksonCompatibilityMode.JsonWrapper$1.value()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JacksonCompatibilityMode.JsonWrapper$1.annotationType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JacksonCompatibilityMode.getJsonWrapper(Annotation[])</name>
      <ncss>12</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JdkDatetimeSupport.ThreadLocal$1.initialValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JdkDatetimeSupport.Encoder.ReflectionEncoder$1.encode(Object,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JdkDatetimeSupport.Encoder.ReflectionEncoder$1.wrap(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JdkDatetimeSupport.Decoder$1.decode(JsonIterator)</name>
      <ncss>4</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.JdkDatetimeSupport.enable(String)</name>
      <ncss>14</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.NamingStrategySupport.NamingStrategy.translate(String)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.NamingStrategySupport.EmptyExtension$1.updateClassDescriptor(ClassDescriptor)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.NamingStrategySupport.enable(NamingStrategy)</name>
      <ncss>10</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.NamingStrategySupport.NamingStrategy$1.translate(String)</name>
      <ncss>21</ncss>
      <ccn>11</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.NamingStrategySupport.NamingStrategy$1.translate(String)</name>
      <ncss>10</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.NamingStrategySupport.NamingStrategy$1.translate(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.NamingStrategySupport.NamingStrategy$1.translate(String)</name>
      <ncss>21</ncss>
      <ccn>10</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.PreciseFloatSupport.Encoder.ReflectionEncoder$1.encode(Object,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.PreciseFloatSupport.Encoder.ReflectionEncoder$1.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.PreciseFloatSupport.Encoder.DoubleEncoder$1.encodeDouble(double,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.PreciseFloatSupport.Encoder.ReflectionEncoder$1.encode(Object,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.PreciseFloatSupport.Encoder.ReflectionEncoder$1.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.PreciseFloatSupport.Encoder.FloatEncoder$1.encodeFloat(float,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.extra.PreciseFloatSupport.enable()</name>
      <ncss>22</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.fuzzy.MaybeEmptyArrayDecoder.decode(JsonIterator)</name>
      <ncss>8</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.fuzzy.MaybeStringDoubleDecoder.decodeDouble(JsonIterator)</name>
      <ncss>10</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.fuzzy.MaybeStringFloatDecoder.decodeFloat(JsonIterator)</name>
      <ncss>10</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.fuzzy.MaybeStringIntDecoder.decodeInt(JsonIterator)</name>
      <ncss>10</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.fuzzy.MaybeStringLongDecoder.decodeLong(JsonIterator)</name>
      <ncss>10</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.fuzzy.MaybeStringShortDecoder.decodeShort(JsonIterator)</name>
      <ncss>10</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.fuzzy.StringDoubleDecoder.decodeDouble(JsonIterator)</name>
      <ncss>9</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.fuzzy.StringFloatDecoder.decodeFloat(JsonIterator)</name>
      <ncss>9</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.fuzzy.StringIntDecoder.decodeInt(JsonIterator)</name>
      <ncss>9</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.fuzzy.StringLongDecoder.decodeLong(JsonIterator)</name>
      <ncss>9</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.fuzzy.StringShortDecoder.decodeShort(JsonIterator)</name>
      <ncss>9</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImpl.readObjectFieldAsHash(JsonIterator)</name>
      <ncss>17</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImpl.readObjectFieldAsSlice(JsonIterator)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImpl.skipArray(JsonIterator)</name>
      <ncss>19</ncss>
      <ccn>8</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImpl.skipObject(JsonIterator)</name>
      <ncss>19</ncss>
      <ccn>8</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImpl.skipString(JsonIterator)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImpl.skipUntilBreak(JsonIterator)</name>
      <ncss>7</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImpl.skipNumber(JsonIterator)</name>
      <ncss>12</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImpl.readSlice(JsonIterator)</name>
      <ncss>10</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImpl.nextToken(JsonIterator)</name>
      <ncss>13</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImpl.readByte(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImpl.readAny(JsonIterator)</name>
      <ncss>27</ncss>
      <ccn>15</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImpl.skipFixedBytes(JsonIterator,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImpl.loadMore(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImpl.readStringSlowPath(JsonIterator,int)</name>
      <ncss>71</ncss>
      <ccn>29</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImpl.updateStringCopyBound(JsonIterator,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImpl.readPositiveInt(JsonIterator,byte)</name>
      <ncss>42</ncss>
      <ccn>22</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImpl.readPositiveLong(JsonIterator,byte)</name>
      <ncss>40</ncss>
      <ccn>20</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImpl.readPositiveDouble(JsonIterator)</name>
      <ncss>27</ncss>
      <ccn>15</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplArray.readArray(JsonIterator)</name>
      <ncss>17</ncss>
      <ccn>12</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplArray.readArrayCB(JsonIterator,JsonIterator.ReadArrayCallback,Object)</name>
      <ncss>16</ncss>
      <ccn>13</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplForStreaming.readObjectFieldAsHash(JsonIterator)</name>
      <ncss>20</ncss>
      <ccn>12</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplForStreaming.readObjectFieldAsSlice(JsonIterator)</name>
      <ncss>15</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplForStreaming.skipArray(JsonIterator)</name>
      <ncss>21</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplForStreaming.skipObject(JsonIterator)</name>
      <ncss>21</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplForStreaming.skipString(JsonIterator)</name>
      <ncss>21</ncss>
      <ccn>11</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplForStreaming.skipUntilBreak(JsonIterator)</name>
      <ncss>10</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplForStreaming.skipNumber(JsonIterator)</name>
      <ncss>14</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplForStreaming.readSlice(JsonIterator)</name>
      <ncss>26</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplForStreaming.nextToken(JsonIterator)</name>
      <ncss>15</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplForStreaming.loadMore(JsonIterator)</name>
      <ncss>15</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplForStreaming.keepSkippedBytesThenRead(JsonIterator)</name>
      <ncss>23</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplForStreaming.readByte(JsonIterator)</name>
      <ncss>5</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplForStreaming.readAny(JsonIterator)</name>
      <ncss>35</ncss>
      <ccn>15</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplForStreaming.copySkippedBytes(JsonIterator)</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplForStreaming.skipFixedBytes(JsonIterator,int)</name>
      <ncss>10</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplForStreaming.updateStringCopyBound(JsonIterator,int)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplForStreaming.readStringSlowPath(JsonIterator,int)</name>
      <ncss>67</ncss>
      <ccn>26</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplForStreaming.readLongSlowPath(JsonIterator,long)</name>
      <ncss>17</ncss>
      <ccn>10</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplForStreaming.readIntSlowPath(JsonIterator,int)</name>
      <ncss>17</ncss>
      <ccn>10</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplForStreaming.readDoubleSlowPath(JsonIterator)</name>
      <ncss>5</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplForStreaming.readNumber(JsonIterator)</name>
      <ncss>33</ncss>
      <ccn>21</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplForStreaming.readPositiveDouble(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplForStreaming.readPositiveLong(JsonIterator,byte)</name>
      <ncss>7</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplForStreaming.readPositiveInt(JsonIterator,byte)</name>
      <ncss>7</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplNumber.readDouble(JsonIterator)</name>
      <ncss>7</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplNumber.readFloat(JsonIterator)</name>
      <ncss>7</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplNumber.readInt(JsonIterator)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplNumber.readLong(JsonIterator)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplObject.readObject(JsonIterator)</name>
      <ncss>26</ncss>
      <ccn>18</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplObject.readObjectCB(JsonIterator,JsonIterator.ReadObjectCallback,Object)</name>
      <ncss>25</ncss>
      <ccn>19</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplSkip.skip(JsonIterator)</name>
      <ncss>34</ncss>
      <ccn>25</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplSkip.findStringEnd(JsonIterator)</name>
      <ncss>20</ncss>
      <ccn>12</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplString.readString(JsonIterator)</name>
      <ncss>9</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplString.parse(JsonIterator)</name>
      <ncss>18</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplString.translateHex(byte)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.IterImplString.findSliceEnd(JsonIterator)</name>
      <ncss>9</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.JsonIterator(InputStream,InputStream[],int,int)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.JsonIterator()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.parse(InputStream,int)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.parse(JsonIterator[])</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.parse(JsonIterator[],int,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.parse(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.parse(Slice)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.reset(slice.tail[])</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.reset(buf.length[],int,int)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.reset(Slice)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.reset(InputStream)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.close()</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.unreadByte()</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.reportError(String,String)</name>
      <ncss>9</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.currentBuffer()</name>
      <ncss>6</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.readNull()</name>
      <ncss>7</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.readBoolean()</name>
      <ncss>9</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.readShort()</name>
      <ncss>6</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.readInt()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.readLong()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.readArray()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.readNumberAsString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.ReadArrayCallback.handle(JsonIterator,Object)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.readArrayCB(ReadArrayCallback,Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.readString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.readStringAsSlice()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.readObject()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.ReadObjectCallback.handle(JsonIterator,String,Object)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.readObjectCB(ReadObjectCallback,Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.readFloat()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.readDouble()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.readBigDecimal()</name>
      <ncss>8</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.readBigInteger()</name>
      <ncss>8</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.readAny()</name>
      <ncss>4</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.ReadArrayCallback$1.handle(JsonIterator,Object)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.ReadObjectCallback$1.handle(JsonIterator,String,Object)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.read()</name>
      <ncss>24</ncss>
      <ccn>16</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.read(T)</name>
      <ncss>7</ncss>
      <ccn>4</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.currentConfig()</name>
      <ncss>4</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.read(T,T)</name>
      <ncss>6</ncss>
      <ccn>4</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.read(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.read(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.read(Type)</name>
      <ncss>5</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.whatIsNext()</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.skip()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.deserialize(Config,String,T)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.deserialize(String,T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.deserialize(Config,String,T)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.deserialize(String,T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.deserialize(Config,Config[],T)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.deserialize(T[],T)</name>
      <ncss>14</ncss>
      <ccn>8</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.deserialize(Config,Config[],T)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.deserialize(T[],T)</name>
      <ncss>14</ncss>
      <ccn>8</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.deserialize(Config,String)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.deserialize(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.deserialize(Config,Config[])</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.deserialize(Any[])</name>
      <ncss>14</ncss>
      <ccn>8</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.findLastNotSpacePos(int[])</name>
      <ncss>6</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.setMode(DecodingMode)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIterator.enableStreamingSupport()</name>
      <ncss>7</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIteratorPool.borrowJsonIterator()</name>
      <ncss>11</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.JsonIteratorPool.returnJsonIterator(JsonIterator)</name>
      <ncss>8</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.Codegen.getReflectionEncoder(String,Type)</name>
      <ncss>17</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.Codegen.getEncoder(String,Type)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.Codegen.gen(String,Type)</name>
      <ncss>46</ncss>
      <ccn>24</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.Codegen.Encoder$1.encode(Object,JsonStream)</name>
      <ncss>14</ncss>
      <ccn>8</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.Codegen.addPlaceholderEncoderToSupportRecursiveStructure(String)</name>
      <ncss>16</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.Codegen.chooseAccessibleSuper(Type)</name>
      <ncss>16</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.Codegen.walkSuperUntilPublic(Class)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.Codegen.getGeneratedSource(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.Codegen.staticGen(Class,String,CodegenResult)</name>
      <ncss>10</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.Codegen.staticGen(Class,String,OutputStreamWriter,CodegenResult)</name>
      <ncss>8</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.Codegen.createDir(String)</name>
      <ncss>8</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.Codegen.genSource(String,ClassInfo)</name>
      <ncss>11</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.Codegen.staticGenEncoders(TypeLiteral[],CodegenAccess.StaticCodegenTarget)</name>
      <ncss>4</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenAccess.writeVal(String,Object,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenAccess.writeVal(String,boolean,JsonStream)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenAccess.writeVal(String,byte,JsonStream)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenAccess.writeVal(String,short,JsonStream)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenAccess.writeVal(String,int,JsonStream)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenAccess.writeVal(String,char,JsonStream)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenAccess.writeVal(String,long,JsonStream)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenAccess.writeVal(String,float,JsonStream)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenAccess.writeVal(String,double,JsonStream)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenAccess.writeMapKey(String,Object,JsonStream)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenAccess.writeStringWithoutQuote(String,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenAccess.staticGenEncoders(TypeLiteral[],StaticCodegenTarget)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenAccess.wrap(Object)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenAccess.StaticCodegenTarget.StaticCodegenTarget(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplArray.genCollection(String,ClassInfo)</name>
      <ncss>19</ncss>
      <ccn>8</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplArray.genArray(String,ClassInfo)</name>
      <ncss>47</ncss>
      <ccn>10</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplArray.genList(String,Class,Type)</name>
      <ncss>41</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplArray.genCollection(String,Class,Type)</name>
      <ncss>40</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplMap.genMap(String,ClassInfo)</name>
      <ncss>67</ncss>
      <ccn>13</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.encode(Object,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.encode(Object,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.encode(Object,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.encode(Object,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.encode(Object,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.encode(Object,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.encode(Object,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.encode(Object,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.encode(Object,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.encode(Object,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.encode(Object,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.encode(Object,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.encode(Object,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.encode(Object,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.encode(Object,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.encode(Object,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.encode(Object,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.encode(Object,JsonStream)</name>
      <ncss>5</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.wrap(Object)</name>
      <ncss>4</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.encode(Object,JsonStream)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.wrap(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.encode(Object,JsonStream)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.IdentityHashMap$1.Encoder.ReflectionEncoder$1.wrap(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenResult,String,Type,boolean)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenResult,String,Type,boolean,boolean)</name>
      <ncss>28</ncss>
      <ccn>11</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.getTypeName(Type)</name>
      <ncss>11</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplNative.genEnum(Class)</name>
      <ncss>16</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplObject.genObject(ClassInfo)</name>
      <ncss>43</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplObject.hasFieldOutput(ClassDescriptor)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplObject.genField(CodegenResult,Binding,String,int)</name>
      <ncss>47</ncss>
      <ccn>12</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplObject.appendComma(CodegenResult,int)</name>
      <ncss>18</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenImplObject.supportCollectionValueNullable(Class)</name>
      <ncss>8</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenResult.CodegenResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenResult.append(String)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenResult.buffer(char)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenResult.buffer(String)</name>
      <ncss>7</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenResult.flushBuffer()</name>
      <ncss>8</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenResult.toString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenResult.appendBuffer()</name>
      <ncss>6</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenResult.generateWrapperCode(Class)</name>
      <ncss>12</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenResult.append(StringBuilder,String)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenResult.bufferToWriteOp(String)</name>
      <ncss>22</ncss>
      <ccn>13</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.CodegenResult.escape(char)</name>
      <ncss>6</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.DefaultMapKeyEncoder.registerOrGetExisting(Type)</name>
      <ncss>8</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.DefaultMapKeyEncoder.encode(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.DynamicCodegen.gen(Class,String,CodegenResult)</name>
      <ncss>15</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.JsonStream(OutputStream,int)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.reset(OutputStream)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.ensure(int)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.growAtLeast(int)</name>
      <ncss>7</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.write(int)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.write(byte,byte)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.write(byte,byte,byte)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.write(byte,byte,byte,byte)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.write(byte,byte,byte,byte,byte)</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.write(byte,byte,byte,byte,byte,byte)</name>
      <ncss>8</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.write(byte[],int,int)</name>
      <ncss>12</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.flush()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.close()</name>
      <ncss>8</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.flushBuffer()</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeVal(String)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeRaw(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeRaw(String,int)</name>
      <ncss>21</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeVal(Boolean)</name>
      <ncss>8</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeVal(boolean)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeTrue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeFalse()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeVal(Short)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeVal(short)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeVal(Integer)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeVal(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeVal(Long)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeVal(long)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeVal(Float)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeVal(float)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeVal(Double)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeVal(double)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeVal(Any)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeNull()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeEmptyObject()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeEmptyArray()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeArrayStart()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeMore()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeIndention()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeIndention(int)</name>
      <ncss>8</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeArrayEnd()</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeObjectStart()</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeObjectField(String)</name>
      <ncss>6</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeObjectEnd()</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeVal(Object)</name>
      <ncss>7</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeVal(T,T)</name>
      <ncss>7</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.writeVal(Type,T)</name>
      <ncss>7</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.currentConfig()</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.serialize(Config,Object,OutputStream)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.serialize(Object,OutputStream)</name>
      <ncss>10</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.serialize(Config,TypeLiteral,Object,OutputStream)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.serialize(TypeLiteral,Object,OutputStream)</name>
      <ncss>10</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.serialize(Type,Object,OutputStream)</name>
      <ncss>10</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.serialize(Config,Object)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.serialize(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.serialize(Config,TypeLiteral,Object)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.serialize(TypeLiteral,Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.serialize(boolean,Type,Object)</name>
      <ncss>12</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.setMode(EncodingMode)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.setIndentionStep(int)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.registerNativeEncoder(Class,Encoder.ReflectionEncoder)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStream.buffer()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStreamPool.borrowJsonStream()</name>
      <ncss>10</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.JsonStreamPool.returnJsonStream(JsonStream)</name>
      <ncss>9</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.ReflectionArrayEncoder.ReflectionArrayEncoder(Class,Type[])</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.ReflectionArrayEncoder.encode(Object,JsonStream)</name>
      <ncss>15</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.ReflectionArrayEncoder.wrap(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.ReflectionCollectionEncoder.ReflectionCollectionEncoder(Class,Type[])</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.ReflectionCollectionEncoder.encode(Object,JsonStream)</name>
      <ncss>16</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.ReflectionCollectionEncoder.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.ReflectionEncoderFactory.create(ClassInfo)</name>
      <ncss>14</ncss>
      <ccn>11</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.ReflectionEnumEncoder.ReflectionEnumEncoder(Class)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.ReflectionEnumEncoder.encode(Object,JsonStream)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.ReflectionEnumEncoder.wrap(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.ReflectionListEncoder.ReflectionListEncoder(Class,Type[])</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.ReflectionListEncoder.encode(Object,JsonStream)</name>
      <ncss>15</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.ReflectionListEncoder.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.ReflectionMapEncoder.ReflectionMapEncoder(Class,Type[])</name>
      <ncss>11</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.ReflectionMapEncoder.encode(Object,JsonStream)</name>
      <ncss>17</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.ReflectionMapEncoder.writeEntry(JsonStream,boolean,Object)</name>
      <ncss>12</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.ReflectionMapEncoder.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.ReflectionObjectEncoder.ReflectionObjectEncoder(ClassInfo)</name>
      <ncss>10</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.ReflectionObjectEncoder.encode(Object,JsonStream)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.ReflectionObjectEncoder.wrap(Object)</name>
      <ncss>11</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.ReflectionObjectEncoder.enocde_(Object,JsonStream)</name>
      <ncss>32</ncss>
      <ccn>11</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.ReflectionObjectEncoder.writeEncodeTo(JsonStream,boolean,EncodeTo,Object)</name>
      <ncss>14</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.StreamImplNumber.writeInt(JsonStream,int)</name>
      <ncss>39</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.StreamImplNumber.writeFirstBuf(int[],int,int)</name>
      <ncss>10</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.StreamImplNumber.writeBuf(start[],int,int)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.StreamImplNumber.writeLong(JsonStream,long)</name>
      <ncss>84</ncss>
      <ccn>15</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.StreamImplNumber.writeFloat(JsonStream,float)</name>
      <ncss>21</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.StreamImplNumber.writeDouble(JsonStream,double)</name>
      <ncss>21</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.StreamImplString.writeString(JsonStream,String)</name>
      <ncss>28</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.StreamImplString.writeStringWithoutQuote(JsonStream,String)</name>
      <ncss>23</ncss>
      <ccn>11</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.StreamImplString.writeStringSlowPath(JsonStream,String,int,int)</name>
      <ncss>11</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.StreamImplString.writeStringSlowPathWithoutEscapeUnicode(JsonStream,String,int,int)</name>
      <ncss>26</ncss>
      <ccn>14</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.StreamImplString.writeAsciiChar(JsonStream,int)</name>
      <ncss>28</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.output.StreamImplString.writeAsSlashU(JsonStream,int)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionArrayDecoder.ReflectionArrayDecoder(Class)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionArrayDecoder.decode(JsonIterator)</name>
      <ncss>44</ncss>
      <ccn>15</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionCollectionDecoder.ReflectionCollectionDecoder(Class,Type[])</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionCollectionDecoder.decode(JsonIterator)</name>
      <ncss>4</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionCollectionDecoder.decode_(JsonIterator)</name>
      <ncss>11</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionDecoderFactory.create(ClassInfo)</name>
      <ncss>12</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionEnumDecoder.ReflectionEnumDecoder(Class)</name>
      <ncss>4</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionEnumDecoder.decode(JsonIterator)</name>
      <ncss>8</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionMapDecoder.ReflectionMapDecoder(Class,Type[])</name>
      <ncss>11</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionMapDecoder.decode(JsonIterator)</name>
      <ncss>4</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionMapDecoder.decode_(JsonIterator)</name>
      <ncss>12</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionMapDecoder.readMapKey(JsonIterator)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionObjectDecoder.Object$1.toString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionObjectDecoder.ReflectionObjectDecoder(ClassInfo)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionObjectDecoder.init(ClassInfo)</name>
      <ncss>22</ncss>
      <ccn>14</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionObjectDecoder.Decoder$1.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionObjectDecoder.addBinding(ClassInfo,Binding)</name>
      <ncss>21</ncss>
      <ccn>10</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionObjectDecoder.create()</name>
      <ncss>8</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionObjectDecoder.OnlyField.decode(JsonIterator)</name>
      <ncss>4</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionObjectDecoder.OnlyField.decode_(JsonIterator)</name>
      <ncss>38</ncss>
      <ccn>17</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionObjectDecoder.WithCtor.decode(JsonIterator)</name>
      <ncss>4</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionObjectDecoder.WithCtor.decode_(JsonIterator)</name>
      <ncss>48</ncss>
      <ccn>20</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionObjectDecoder.WithWrapper.decode(JsonIterator)</name>
      <ncss>4</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionObjectDecoder.WithWrapper.decode_(JsonIterator)</name>
      <ncss>52</ncss>
      <ccn>20</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionObjectDecoder.setToBinding(Object,Binding,Object)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionObjectDecoder.setExtra(Object,Object)</name>
      <ncss>11</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionObjectDecoder.canNotSetDirectly(Binding)</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionObjectDecoder.decodeBinding(JsonIterator,Binding)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionObjectDecoder.decodeBinding(JsonIterator,Object,Binding)</name>
      <ncss>4</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionObjectDecoder.onUnknownProperty(JsonIterator,Slice,Object)</name>
      <ncss>10</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionObjectDecoder.collectMissingFields(long)</name>
      <ncss>7</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionObjectDecoder.applyWrappers(Object[],Object)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionObjectDecoder.createNewObject(JsonIterator,Object[])</name>
      <ncss>13</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.ReflectionObjectDecoder.createNewObject(Object)</name>
      <ncss>7</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Binding.Binding(ClassInfo,Type,Type)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Binding.decoderCacheKey()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Binding.encoderCacheKey()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Binding.substituteTypeVariables(Type,Type)</name>
      <ncss>14</ncss>
      <ccn>8</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Binding.translateTypeVariable(Type,TypeVariable)</name>
      <ncss>11</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Binding.getAnnotation(T)</name>
      <ncss>7</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Binding.equals(Object)</name>
      <ncss>11</ncss>
      <ccn>13</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Binding.hashCode()</name>
      <ncss>5</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Binding.toString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.ClassDescriptor.ClassDescriptor()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.ClassDescriptor.getDecodingClassDescriptor(ClassInfo,boolean)</name>
      <ncss>41</ncss>
      <ccn>16</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.ClassDescriptor.getEncodingClassDescriptor(ClassInfo,boolean)</name>
      <ncss>25</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.ClassDescriptor.decodingDeduplicate(ClassDescriptor)</name>
      <ncss>21</ncss>
      <ccn>10</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.ClassDescriptor.deduplicateByFromName(Binding,Binding)</name>
      <ncss>7</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.ClassDescriptor.encodingDeduplicate(ClassDescriptor)</name>
      <ncss>19</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.ClassDescriptor.getCtor(Class)</name>
      <ncss>9</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.ClassDescriptor.getFields(Type,ClassInfo,boolean)</name>
      <ncss>14</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.ClassDescriptor.createBindingFromField(Type,ClassInfo,Field)</name>
      <ncss>10</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.ClassDescriptor.getAllFields(Class,boolean)</name>
      <ncss>9</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.ClassDescriptor.getSetters(Type,ClassInfo,boolean)</name>
      <ncss>33</ncss>
      <ccn>14</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.ClassDescriptor.getAllMethods(Class,boolean)</name>
      <ncss>9</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.ClassDescriptor.translateSetterName(String)</name>
      <ncss>8</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.ClassDescriptor.getGetters(Type,ClassInfo,boolean)</name>
      <ncss>31</ncss>
      <ccn>10</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.ClassDescriptor.collectTypeVariableLookup(Type)</name>
      <ncss>18</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.ClassDescriptor.allBindings()</name>
      <ncss>13</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.ClassDescriptor.allDecoderBindings()</name>
      <ncss>9</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.ClassDescriptor.allEncoderBindings()</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.ClassDescriptor.encodeTos()</name>
      <ncss>10</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.ClassDescriptor.collectEncodeTo(EncodeTo,Binding,Integer)</name>
      <ncss>10</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.ClassInfo.ClassInfo(Type)</name>
      <ncss>9</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.Config(String,Builder)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.configName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.getDecoderCacheKey(Type)</name>
      <ncss>13</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.getEncoderCacheKey(Type)</name>
      <ncss>13</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.decodingMode()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.builder()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.copyBuilder()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.indentionStep()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.omitDefaultValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.escapeUnicode()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.encodingMode()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.Builder.Builder()</name>
      <ncss>11</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.Builder.decodingMode(DecodingMode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.Builder.encodingMode(EncodingMode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.Builder.indentionStep(int)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.Builder.omitDefaultValue(boolean)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.Builder.escapeUnicode(boolean)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.Builder.build()</name>
      <ncss>14</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.Builder.doBuild(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.Builder.equals(Object)</name>
      <ncss>15</ncss>
      <ccn>14</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.Builder.hashCode()</name>
      <ncss>7</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.Builder.copy()</name>
      <ncss>8</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.updateClassDescriptor(ClassDescriptor)</name>
      <ncss>29</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.detectUnwrappers(ClassDescriptor,Method)</name>
      <ncss>7</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.detectWrappers(ClassDescriptor,Method)</name>
      <ncss>30</ncss>
      <ccn>11</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.getParamNames(Object,int)</name>
      <ncss>7</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.reflectCall(Object,String,Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.detectStaticFactory(ClassDescriptor,Method)</name>
      <ncss>24</ncss>
      <ccn>8</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.detectCtor(ClassDescriptor)</name>
      <ncss>22</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.updateBindings(ClassDescriptor)</name>
      <ncss>24</ncss>
      <ccn>10</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.updateBindingWithJsonProperty(Binding,JsonProperty)</name>
      <ncss>28</ncss>
      <ccn>13</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.createOmitValue(Type)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.getJsonWrapper(Annotation[])</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.getJsonUnwrapper(Annotation[])</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.getJsonCreator(Annotation[])</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.getJsonProperty(Annotation[])</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.getJsonIgnore(Annotation[])</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Config.getAnnotation(Annotation[],T)</name>
      <ncss>7</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.ConstructorDescriptor.toString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Decoder.decode(JsonIterator)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Decoder.BooleanDecoder.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Decoder.BooleanDecoder.decodeBoolean(JsonIterator)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Decoder.ShortDecoder.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Decoder.ShortDecoder.decodeShort(JsonIterator)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Decoder.IntDecoder.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Decoder.IntDecoder.decodeInt(JsonIterator)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Decoder.LongDecoder.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Decoder.LongDecoder.decodeLong(JsonIterator)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Decoder.FloatDecoder.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Decoder.FloatDecoder.decodeFloat(JsonIterator)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Decoder.DoubleDecoder.decode(JsonIterator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Decoder.DoubleDecoder.decodeDouble(JsonIterator)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.EmptyExtension.chooseImplementation(Type)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.EmptyExtension.canCreate(Class)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.EmptyExtension.create(Class)</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.EmptyExtension.createDecoder(String,Type)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.EmptyExtension.createEncoder(String,Type)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.EmptyExtension.updateClassDescriptor(ClassDescriptor)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Encoder.encode(Object,JsonStream)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Encoder.ReflectionEncoder.wrap(Object)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Encoder.BooleanEncoder.encode(Object,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Encoder.BooleanEncoder.encodeBoolean(boolean,JsonStream)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Encoder.ShortEncoder.encode(Object,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Encoder.ShortEncoder.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Encoder.ShortEncoder.encodeShort(short,JsonStream)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Encoder.StringShortEncoder.encodeShort(short,JsonStream)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Encoder.IntEncoder.encode(Object,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Encoder.IntEncoder.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Encoder.IntEncoder.encodeInt(int,JsonStream)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Encoder.StringIntEncoder.encodeInt(int,JsonStream)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Encoder.LongEncoder.encode(Object,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Encoder.LongEncoder.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Encoder.LongEncoder.encodeLong(long,JsonStream)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Encoder.StringLongEncoder.encodeLong(long,JsonStream)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Encoder.FloatEncoder.encode(Object,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Encoder.FloatEncoder.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Encoder.FloatEncoder.encodeFloat(float,JsonStream)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Encoder.StringFloatEncoder.encodeFloat(float,JsonStream)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Encoder.DoubleEncoder.encode(Object,JsonStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Encoder.DoubleEncoder.wrap(Object)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Encoder.DoubleEncoder.encodeDouble(double,JsonStream)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Encoder.StringDoubleEncoder.encodeDouble(double,JsonStream)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Extension.chooseImplementation(Type)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Extension.canCreate(Class)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Extension.create(Class)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Extension.createDecoder(String,Type)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Extension.createEncoder(String,Type)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Extension.updateClassDescriptor(ClassDescriptor)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.GenericsHelper.createGenericArrayType(Type)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.GenericsHelper.createParameterizedType(Type[],Type,Type)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.GenericsHelper.isSameClass(Type,Class)</name>
      <ncss>7</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.GenericsHelper.useImpl(Type,Class)</name>
      <ncss>7</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.GenericsHelper.GenericArrayTypeImpl.GenericArrayTypeImpl(Type)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.GenericsHelper.GenericArrayTypeImpl.getGenericComponentType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.GenericsHelper.GenericArrayTypeImpl.equals(Object)</name>
      <ncss>7</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.GenericsHelper.GenericArrayTypeImpl.hashCode()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.GenericsHelper.GenericArrayTypeImpl.toString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.GenericsHelper.ParameterizedTypeImpl.ParameterizedTypeImpl(Type[],Type,Type)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.GenericsHelper.ParameterizedTypeImpl.getActualTypeArguments()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.GenericsHelper.ParameterizedTypeImpl.getOwnerType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.GenericsHelper.ParameterizedTypeImpl.getRawType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.GenericsHelper.ParameterizedTypeImpl.equals(Object)</name>
      <ncss>11</ncss>
      <ccn>12</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.GenericsHelper.ParameterizedTypeImpl.hashCode()</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.GenericsHelper.ParameterizedTypeImpl.toString()</name>
      <ncss>6</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsonException.JsonException()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsonException.JsonException(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsonException.JsonException(String,Throwable)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsonException.JsonException(Throwable)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.ThreadLocal$1.initialValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.setCurrentConfig(Config)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.clearCurrentConfig()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.getCurrentConfig()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.setDefaultConfig(Config)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.getDefaultConfig()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.assignConfigName(Object)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.assignNewConfigName(Object)</name>
      <ncss>11</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.registerExtension(Extension)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.getExtensions()</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.registerMapKeyDecoder(Type,MapKeyDecoder)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.registerMapKeyEncoder(Type,MapKeyEncoder)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.registerTypeImplementation(Class,Class)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.getTypeImplementation(Class)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.registerTypeDecoder(Class,Decoder)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.registerTypeDecoder(TypeLiteral,Decoder)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.registerTypeEncoder(Class,Encoder)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.registerTypeEncoder(TypeLiteral,Encoder)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.registerPropertyDecoder(Class,String,Decoder)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.registerPropertyDecoder(TypeLiteral,String,Decoder)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.registerPropertyEncoder(Class,String,Encoder)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.registerPropertyEncoder(TypeLiteral,String,Encoder)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.copyGlobalSettings(String)</name>
      <ncss>13</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.copyGlobalPropertyEncoder(String,Type,String,Encoder)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.copyGlobalPropertyDecoder(String,Type,String,Decoder)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.copyGlobalTypeEncoder(String,Type,Encoder)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.copyGlobalTypeDecoder(String,Type,Decoder)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.copyGlobalMapKeyDecoder(String,Type,MapKeyDecoder)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.copyGlobalMapKeyEncoder(String,Type,MapKeyEncoder)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.getMapKeyEncoderCacheKey(Type)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.getMapKeyDecoderCacheKey(Type)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.addNewMapDecoder(String,MapKeyDecoder)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.getMapKeyDecoder(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.addNewMapEncoder(String,MapKeyEncoder)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.getMapKeyEncoder(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.getDecoder(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.addNewDecoder(String,Decoder)</name>
      <ncss>7</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.getEncoder(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.addNewEncoder(String,Encoder)</name>
      <ncss>7</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.canCreate(Class)</name>
      <ncss>8</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.create(Class)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.getObjectFactory(Class)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.addObjectFactory(Class,Extension)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.TypeProperty.TypeProperty(Type,String)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.TypeProperty.equals(Object)</name>
      <ncss>9</ncss>
      <ccn>10</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.JsoniterSpi.TypeProperty.hashCode()</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.MapKeyDecoder.decode(Slice)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.MapKeyEncoder.encode(Object)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.OmitValue.shouldOmit(Object)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.OmitValue.code()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.OmitValue.Null.shouldOmit(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.OmitValue.Null.code()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.OmitValue.ZeroByte.shouldOmit(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.OmitValue.ZeroByte.code()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.OmitValue.ZeroShort.shouldOmit(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.OmitValue.ZeroShort.code()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.OmitValue.ZeroInt.shouldOmit(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.OmitValue.ZeroInt.code()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.OmitValue.ZeroLong.shouldOmit(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.OmitValue.ZeroLong.code()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.OmitValue.ZeroFloat.shouldOmit(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.OmitValue.ZeroFloat.code()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.OmitValue.ZeroDouble.shouldOmit(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.OmitValue.ZeroDouble.code()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.OmitValue.ZeroChar.shouldOmit(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.OmitValue.ZeroChar.code()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.OmitValue.False.shouldOmit(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.OmitValue.False.code()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.OmitValue.Parsed.Parsed(Object,String)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.OmitValue.Parsed.parse(Type,String)</name>
      <ncss>72</ncss>
      <ccn>40</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.OmitValue.Parsed.shouldOmit(Object)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.OmitValue.Parsed.code()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Slice.Slice(int[],int,int)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Slice.reset(tail[],int,int)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Slice.at(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Slice.len()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Slice.data()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Slice.head()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Slice.tail()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Slice.make(String)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Slice.equals(Object)</name>
      <ncss>8</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Slice.hashCode()</name>
      <ncss>5</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.Slice.toString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.TypeLiteral.TypeLiteral()</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.TypeLiteral.TypeLiteral(Type,String,String)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.TypeLiteral.generateDecoderCacheKey(Type)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.TypeLiteral.generateEncoderCacheKey(Type)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.TypeLiteral.generateCacheKey(Type,String)</name>
      <ncss>30</ncss>
      <ccn>11</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.TypeLiteral.formatTypeWithoutSpecialCharacter(Type)</name>
      <ncss>15</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.TypeLiteral.getSuperclassTypeParameter(Class)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.TypeLiteral.create(Type)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.TypeLiteral.createNew(Type)</name>
      <ncss>9</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.TypeLiteral.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.TypeLiteral.getDecoderCacheKey()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.TypeLiteral.getDecoderCacheKey(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.TypeLiteral.getEncoderCacheKey()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.TypeLiteral.getEncoderCacheKey(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.TypeLiteral.getNativeType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.TypeLiteral.toString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.UnwrapperDescriptor.UnwrapperDescriptor(Method)</name>
      <ncss>16</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.UnwrapperDescriptor.isMapUnwrapper(Method)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.spi.UnwrapperDescriptor.isStreamUnwrapper(Method)</name>
      <ncss>7</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.static_codegen.StaticCodegen.main(String[])</name>
      <ncss>22</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.jsoniter.static_codegen.StaticCodegenConfig.setup()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.jsoniter.static_codegen.StaticCodegenConfig.whatToCodegen()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function_averages>
      <ncss>6.82</ncss>
      <ccn>2.97</ccn>
      <javadocs>0.01</javadocs>
    </function_averages>
    <ncss>8,974.00</ncss>
  </functions>
</javancss>
